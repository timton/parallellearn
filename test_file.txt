        # ENSURE POSTER SELECTED FOR UPLOAD
        # http://flask.pocoo.org/docs/0.12/patterns/fileuploads/
        # check if the post request has the file part
        if 'poster' not in request.files:
            session.pop('new_project', None)
            return apology("Couldn't upload this project.", "Please select a poster image.")

        # if user does not select file, browser also
        # submit a empty part without filename
        file = request.files['poster']
        if not file or file.filename == '':
            session.pop('new_project', None)
            return apology("Couldn't upload this project.", "Please select a poster image.")

        # ensure poster file (extension) allowed
        if forbidden_poster(file.filename):
            session.pop('new_project', None)
            return apology("Couldn't upload this project.",
                           "Allowed extensions for poster images: jpeg/jpeg/png/svg.")

        # ensure poster image not too large
        # https://stackoverflow.com/questions/2104080/how-to-check-file-size-in-python
        old_file_position = file.tell()
        file.seek(0, os.SEEK_END)
        size = file.tell()
        file.seek(old_file_position, os.SEEK_SET)
        if size > 300000:
            session.pop('new_project', None)
            return apology("Couldn't upload this project.", "Maximum size for poster images is 300 KB.")

        # get the new project description, store it in the new project object
        # ensure description of the project was submitted
        if not request.form.get("new_project_description"):
            session.pop('new_project', None)
            return apology("Couldn't upload this project.", "Please provide a description.")
        else:
            session["new_project"]["description"] = request.form.get("new_project_description")

        # try to upload the poster
        try:
            postername = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], postername))
        except RuntimeError:
            session.pop('new_project', None)
            return apology("Couldn't upload this project.", "Please try again later.")

        # upload new project metadata
        try:
            if session["new_project"]["type"] != "tv series":
                db.execute("INSERT INTO projects (type, title, author, year, user_id, line_count, poster, description) \
                           VALUES (:type, :title, :author, :year, :user_id, :line_count, :poster, :description)",
                           type=session["new_project"]["type"], title=session["new_project"]["title"],
                           author=session["new_project"]["author"], year=session["new_project"]["year"],
                           user_id=session["user_id"], line_count=session["new_project"]["line_count"],
                           poster=postername, description=session["new_project"]["description"])
            else:
                db.execute("INSERT INTO projects (type, title, author, year, user_id, line_count, season, episode, poster, description) \
                           VALUES (:type, :title, :author, :year, :user_id, :line_count, :season, :episode, :poster, :description)",
                           type=session["new_project"]["type"], title=session["new_project"]["title"],
                           author=session["new_project"]["author"], year=session["new_project"]["year"],
                           user_id=session["user_id"], line_count=session["new_project"]["line_count"],
                           season=session["new_project"]["season"], episode=session["new_project"]["episode"],
                           poster=postername, description=session["new_project"]["description"])

        except RuntimeError:
            session.pop('new_project', None)
            return apology("Couldn't save this project in the database.")
